clust_coeff_H <- transitivity(H, type = "local", isolates = "zero")
# Create a dataframe
df <- data.frame(degree = deg_H, clustering = clust_coeff_H)
# Compute average clustering for each degree value
library(dplyr)
avg_clustering_by_degree <- df %>%
group_by(degree) %>%
summarize(avg_clustering = mean(clustering), .groups = 'drop')
# Plot: Degree vs Average Clustering Coefficient
plot(avg_clustering_by_degree$degree, avg_clustering_by_degree$avg_clustering,
log = "x",  # optional: log scale for degree
xlab = "Degree",
ylab = "Average Clustering Coefficient",
main = "Clustering Coefficient vs Degree",
pch = 16,
col = "blue")
grid()
graphics.off()
deg_H <- degree(H)
clust_coeff_H <- transitivity(H, type = "local", isolates = "zero")
# Create a dataframe
df <- data.frame(degree = deg_H, clustering = clust_coeff_H)
# Compute average clustering for each degree value
library(dplyr)
avg_clustering_by_degree <- df %>%
group_by(degree) %>%
summarize(avg_clustering = mean(clustering), .groups = 'drop')
# Plot: Degree vs Average Clustering Coefficient
plot(avg_clustering_by_degree$degree, avg_clustering_by_degree$avg_clustering,
log = "x",  # optional: log scale for degree
xlab = "Degree",
ylab = "Average Clustering Coefficient",
main = "Clustering Coefficient vs Degree",
pch = 16,
col = "blue")
grid()
deg_H <- degree(H)
# Calculate local clustering coefficient for vertices in H
# type="local" gives the clustering coefficient for each vertex
# It returns NaN for vertices with degree < 2, as clustering is undefined
local_cc_H <- transitivity(H, type = "local")
# Remove vertices with degree < 2 (where CC is NaN)
valid_indices <- deg_H >= 2
filtered_degrees <- deg_H[valid_indices]
filtered_cc <- local_cc_H[valid_indices]
# Create a data frame for easier aggregation
df_cc <- data.frame(degree = filtered_degrees, cc = filtered_cc)
# Calculate the average clustering coefficient for each degree value
# Requires the dplyr package
avg_cc_by_degree <- df_cc %>%
group_by(degree) %>%
summarise(avg_cc = mean(cc), .groups = 'drop') # Calculate mean CC per degree
# Plot average clustering coefficient vs. degree on a log-log scale
plot(avg_cc_by_degree$degree, avg_cc_by_degree$avg_cc, log = "xy",
xlab = "Degree (k) [log scale]",
ylab = "Average Clustering Coefficient C(k) [log scale]",
main = "Average Clustering Coefficient vs. Degree (H)",
pch = 19, # Use filled circles for points
col = "dodgerblue")
graphics.off()
deg_H <- degree(H)
# Calculate local clustering coefficient for vertices in H
# type="local" gives the clustering coefficient for each vertex
# It returns NaN for vertices with degree < 2, as clustering is undefined
local_cc_H <- transitivity(H, type = "local")
# Remove vertices with degree < 2 (where CC is NaN)
valid_indices <- deg_H >= 2
filtered_degrees <- deg_H[valid_indices]
filtered_cc <- local_cc_H[valid_indices]
# Create a data frame for easier aggregation
df_cc <- data.frame(degree = filtered_degrees, cc = filtered_cc)
# Calculate the average clustering coefficient for each degree value
# Requires the dplyr package
avg_cc_by_degree <- df_cc %>%
group_by(degree) %>%
summarise(avg_cc = mean(cc), .groups = 'drop') # Calculate mean CC per degree
# Plot average clustering coefficient vs. degree on a log-log scale
plot(avg_cc_by_degree$degree, avg_cc_by_degree$avg_cc, log = "xy",
xlab = "Degree (k) [log scale]",
ylab = "Average Clustering Coefficient C(k) [log scale]",
main = "Average Clustering Coefficient vs. Degree (H)",
pch = 19, # Use filled circles for points
col = "dodgerblue")
deg_H <- degree(H)
# Calculate local clustering coefficient for vertices in H
# type="local" gives the clustering coefficient for each vertex
# It returns NaN for vertices with degree < 2, as clustering is undefined
local_cc_H <- transitivity(H, type = "local", isolates = "zero") # Use isolates="zero" for consistency if needed, though NaN is more standard for undefined
# Create a data frame linking degree and local CC
df_cc <- data.frame(
vertex_id = V(H)$name,
degree = deg_H,
local_cc = local_cc_H
)
# Filter out vertices where local CC is NaN (degree < 2)
# Also filter out potential NA values if any occurred
df_cc_valid <- df_cc[!is.na(df_cc$local_cc), ]
# Calculate the average clustering coefficient for each degree value
# Requires the dplyr package
avg_cc_by_degree <- df_cc_valid %>%
group_by(degree) %>%
summarise(
avg_cc = mean(local_cc, na.rm = TRUE), # Ensure NAs are removed if any slipped through
.groups = 'drop' # Drop grouping structure after summarising
)
# --- Data Filtering for Log-Log Plot ---
# Filter out degrees with average CC <= 0 for the log-log plot
plot_data_loglog <- avg_cc_by_degree %>%
filter(avg_cc > 0 & degree > 0) # Ensure both degree and avg_cc are positive
# Check if there is data to plot
if (nrow(plot_data_loglog) > 0) {
# Plot average clustering coefficient vs. degree on a log-log scale
plot(plot_data_loglog$degree, plot_data_loglog$avg_cc, log = "xy",
xlab = "Degree (k) [log scale]",
ylab = "Average Clustering Coefficient C(k) [log scale]",
main = "Average Clustering Coefficient vs. Degree (H)",
pch = 19, # Use filled circles for points
col = "dodgerblue",
panel.first = grid(col = "gray", lty = "dotted") # Add grid behind points
)
} else {
cat("No data points with both positive degree and positive average clustering coefficient available for the log-log plot.\n")
# Optional: Plot on linear scales if needed, or show the table
plot(avg_cc_by_degree$degree, avg_cc_by_degree$avg_cc,
xlab = "Degree (k)",
ylab = "Average Clustering Coefficient C(k)",
main = "Average Clustering Coefficient vs. Degree (H) [Linear Scale]",
pch = 19, col = "dodgerblue")
grid(col = "gray", lty = "dotted")
}
V(H)$type <- V(G)$type[match(V(H)$name, V(G)$name)] # Assign type from original G
# Check if type assignment worked and identify node types
# table(V(H)$type) # Should show counts for FALSE (student) and TRUE (club)
# Project H - we want the student-student network.
# Assuming students are type FALSE (as derived from G96 setup).
# If V(G)$type was derived differently, adjust proj1/proj2 accordingly.
projections_H <- bipartite_projection(H)
student_graph_H <- projections_H$proj1 # Graph where nodes are students (type FALSE)
# --- Now, redo the analysis on the student_graph_H ---
# Calculate degrees for vertices in the student network
deg_student_H <- degree(student_graph_H)
# Calculate local clustering coefficient for vertices in the student network
# Use isolates="NaN" which is the default and standard for undefined CC (degree < 2)
local_cc_student_H <- transitivity(student_graph_H, type = "local")
# Create a data frame linking degree and local CC for students
df_student_cc <- data.frame(
vertex_id = V(student_graph_H)$name,
degree = deg_student_H,
local_cc = local_cc_student_H
)
# Filter out vertices where local CC is NaN (degree < 2 in the student graph)
df_student_cc_valid <- df_student_cc[!is.na(df_student_cc$local_cc), ]
# Calculate the average clustering coefficient for each degree value
# Requires the dplyr package
avg_cc_by_degree_student <- df_student_cc_valid %>%
group_by(degree) %>%
summarise(
avg_cc = mean(local_cc, na.rm = TRUE), # Should not be needed if NAs are filtered
.groups = 'drop'
) %>%
filter(degree > 0) # Ensure degree is positive
# --- Data Filtering for Log-Log Plot ---
# Filter out degrees with average CC <= 0 for the log-log plot
plot_data_student_loglog <- avg_cc_by_degree_student %>%
filter(avg_cc > 0) # Only need to filter avg_cc > 0 now
# Check if there is data to plot
if (nrow(plot_data_student_loglog) > 0) {
# Plot average clustering coefficient vs. degree on a log-log scale
plot(plot_data_student_loglog$degree, plot_data_student_loglog$avg_cc, log = "xy",
xlab = "Student Degree (k) [log scale]",
ylab = "Average Clustering Coefficient C(k) [log scale]",
main = "Average Clustering Coefficient vs. Degree (Student Network H)",
pch = 19,
col = "dodgerblue",
panel.first = grid(col = "gray", lty = "dotted")
)
} else {
cat("No data points with positive average clustering coefficient available for the log-log plot in the student network.\n")
# Optional: Plot on linear scales
plot(avg_cc_by_degree_student$degree, avg_cc_by_degree_student$avg_cc,
xlab = "Student Degree (k)",
ylab = "Average Clustering Coefficient C(k)",
main = "Average Clustering Coefficient vs. Degree (Student Network H) [Linear Scale]",
pch = 19, col = "dodgerblue", ylim=c(0, max(avg_cc_by_degree_student$avg_cc, 0.1, na.rm=T))) # Adjust ylim
grid(col = "gray", lty = "dotted")
}
V(H)$type <- V(G)$type[match(V(H)$name, V(G)$name)] # Assign type from original G
# Check if type assignment worked and identify node types
# table(V(H)$type) # Should show counts for FALSE (student) and TRUE (club)
# Project H - we want the student-student network.
# Assuming students are type FALSE (as derived from G96 setup).
# If V(G)$type was derived differently, adjust proj1/proj2 accordingly.
projections_H <- bipartite_projection(H)
student_graph_H <- projections_H$proj1 # Graph where nodes are students (type FALSE)
# --- Now, redo the analysis on the student_graph_H ---
# Calculate degrees for vertices in the student network
deg_student_H <- degree(student_graph_H)
# Calculate local clustering coefficient for vertices in the student network
# Use isolates="NaN" which is the default and standard for undefined CC (degree < 2)
local_cc_student_H <- transitivity(student_graph_H, type = "local")
# Create a data frame linking degree and local CC for students
df_student_cc <- data.frame(
vertex_id = V(student_graph_H)$name,
degree = deg_student_H,
local_cc = local_cc_student_H
)
# Filter out vertices where local CC is NaN (degree < 2 in the student graph)
df_student_cc_valid <- df_student_cc[!is.na(df_student_cc$local_cc), ]
# Calculate the average clustering coefficient for each degree value
# Requires the dplyr package
avg_cc_by_degree_student <- df_student_cc_valid %>%
group_by(degree) %>%
summarise(
avg_cc = mean(local_cc, na.rm = TRUE), # Should not be needed if NAs are filtered
.groups = 'drop'
) %>%
filter(degree > 0) # Ensure degree is positive
# --- Data Filtering for Log-Log Plot ---
# Filter out degrees with average CC <= 0 for the log-log plot
plot_data_student_loglog <- avg_cc_by_degree_student %>%
filter(avg_cc > 0) # Only need to filter avg_cc > 0 now
# Check if there is data to plot
if (nrow(plot_data_student_loglog) > 0) {
# Plot average clustering coefficient vs. degree on a log-log scale
plot(plot_data_student_loglog$degree, plot_data_student_loglog$avg_cc, log = "xy",
xlab = "Student Degree (k) [log scale]",
ylab = "Average Clustering Coefficient C(k) [log scale]",
main = "Clustering Coefficient vs. Degree",
pch = 19,
col = "dodgerblue",
panel.first = grid(col = "gray", lty = "dotted")
)
} else {
cat("No data points with positive average clustering coefficient available for the log-log plot in the student network.\n")
# Optional: Plot on linear scales
plot(avg_cc_by_degree_student$degree, avg_cc_by_degree_student$avg_cc,
xlab = "Student Degree (k)",
ylab = "Average Clustering Coefficient C(k)",
main = "Average Clustering Coefficient vs. Degree (Student Network H) [Linear Scale]",
pch = 19, col = "dodgerblue", ylim=c(0, max(avg_cc_by_degree_student$avg_cc, 0.1, na.rm=T))) # Adjust ylim
grid(col = "gray", lty = "dotted")
}
V(H)$type <- V(G)$type[match(V(H)$name, V(G)$name)] # Assign type from original G
# Check if type assignment worked and identify node types
# table(V(H)$type) # Should show counts for FALSE (student) and TRUE (club)
# Project H - we want the student-student network.
# Assuming students are type FALSE (as derived from G96 setup).
# If V(G)$type was derived differently, adjust proj1/proj2 accordingly.
projections_H <- bipartite_projection(H)
student_graph_H <- projections_H$proj1 # Graph where nodes are students (type FALSE)
# --- Now, redo the analysis on the student_graph_H ---
# Calculate degrees for vertices in the student network
deg_student_H <- degree(student_graph_H)
# Calculate local clustering coefficient for vertices in the student network
# Use isolates="NaN" which is the default and standard for undefined CC (degree < 2)
local_cc_student_H <- transitivity(student_graph_H, type = "local")
# Create a data frame linking degree and local CC for students
df_student_cc <- data.frame(
vertex_id = V(student_graph_H)$name,
degree = deg_student_H,
local_cc = local_cc_student_H
)
# Filter out vertices where local CC is NaN (degree < 2 in the student graph)
df_student_cc_valid <- df_student_cc[!is.na(df_student_cc$local_cc), ]
# Calculate the average clustering coefficient for each degree value
# Requires the dplyr package
avg_cc_by_degree_student <- df_student_cc_valid %>%
group_by(degree) %>%
summarise(
avg_cc = mean(local_cc, na.rm = TRUE), # Should not be needed if NAs are filtered
.groups = 'drop'
) %>%
filter(degree > 0) # Ensure degree is positive
# --- Data Filtering for Log-Log Plot ---
# Filter out degrees with average CC <= 0 for the log-log plot
plot_data_student_loglog <- avg_cc_by_degree_student %>%
filter(avg_cc > 0) # Only need to filter avg_cc > 0 now
plot(plot_data_student_loglog$degree, plot_data_student_loglog$avg_cc, log = "xy",
xlab = "Student Degree (k) [log scale]",
ylab = "Average Clustering Coefficient C(k) [log scale]",
main = "Clustering Coefficient vs. Degree",
pch = 19,
col = "dodgerblue",
panel.first = grid(col = "gray", lty = "dotted")
)
V(H)$type <- V(G)$type[match(V(H)$name, V(G)$name)] # Assign type from original G
projections_H <- bipartite_projection(H)
student_graph_H <- projections_H$proj1 # Graph where nodes are students (type FALSE)
# Calculate degrees for vertices in the student network
deg_student_H <- degree(student_graph_H)
local_cc_student_H <- transitivity(student_graph_H, type = "local")
df_student_cc <- data.frame(
vertex_id = V(student_graph_H)$name,
degree = deg_student_H,
local_cc = local_cc_student_H
)
df_student_cc_valid <- df_student_cc[!is.na(df_student_cc$local_cc), ]
avg_cc_by_degree_student <- df_student_cc_valid %>%
group_by(degree) %>%
summarise(
avg_cc = mean(local_cc, na.rm = TRUE), # Should not be needed if NAs are filtered
.groups = 'drop'
) %>%
filter(degree > 0) # Ensure degree is positive
plot_data_student_loglog <- avg_cc_by_degree_student %>%
filter(avg_cc > 0) # Only need to filter avg_cc > 0 now
plot(plot_data_student_loglog$degree, plot_data_student_loglog$avg_cc, log = "xy",
xlab = "Student Degree (k) [log scale]",
ylab = "Average Clustering Coefficient C(k) [log scale]",
main = "Clustering Coefficient vs. Degree",
pch = 19,
col = "dodgerblue",
panel.first = grid(col = "gray", lty = "dotted")
)
assortativity_coeff_H_student <- assortativity_degree(student_graph_H, directed = FALSE)
cat("Assortativity coefficient (degree) for the student network derived from H:", assortativity_coeff_H_student, "\n")
assortativity_coeff_H_student <- assortativity_degree(H, directed = FALSE)
assortativity_coeff_H_student <- assortativity_degree(H, directed = FALSE)
cat("Assortativity coefficient (degree) for the student network derived from H:", assortativity_coeff_H_student, "\n")
assortativity_coeff_H_student <- assortativity_degree(H, directed = FALSE)
cat("Assortativity coefficient (degree) for H:", assortativity_coeff_H_student, "\n")
projections <- bipartite_projection(G96)
club_graph <- projections$proj2  # This is the club-club graph
# Weight = number of shared members
E(club_graph)$weight
# Top pairs with highest shared members
top_pairs <- as_data_frame(club_graph, what = "edges")
knitr::opts_chunk$set(echo = TRUE)
library('igraph')
library(poweRlaw)
library(dplyr)
url1 <- "https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/affiliations_1996.txt"
url2 <- "https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/affiliations_1996.txt"
affiliations96 <- read.delim(file = url1, check.names = FALSE)
affiliations97 <- read.delim(file = url2, check.names = FALSE)
dim(affiliations96)
G96 <- graph_from_incidence_matrix(as.matrix(affiliations96))
# Split nodes into types by rows versus columns
# V(G96)$type # TRUE = club, FALSE = student,
clubs <- V(G96)[V(G96)$type == TRUE]
club_degrees <- degree(G96, v = clubs)
# Identify top & bottom
cat("top clubs\n")
head(sort(club_degrees, decreasing = TRUE), 3)
cat("Peripheral clubs\n")
head(sort(club_degrees, decreasing = FALSE), 3)
projections <- bipartite_projection(G96)
club_graph <- projections$proj2  # This is the club-club graph
# Weight = number of shared members
E(club_graph)$weight
# Top pairs with highest shared members
top_pairs <- as_data_frame(club_graph, what = "edges")
projections <- bipartite_projection(G96)
club_graph <- projections$proj2  # This is the club-club graph
# Weight = number of shared members
E(club_graph)$weight
# Top pairs with highest shared members
top_pairs <- as_data_frame(club_graph, what = "edges")
# knitr::opts_chunk$set(echo = TRUE)
library('igraph')
library(poweRlaw)
library(dplyr)
url1 <- "https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/affiliations_1996.txt"
url2 <- "https://raw.githubusercontent.com/JeffreyAlanSmith/Integrated_Network_Science/master/data/affiliations_1996.txt"
affiliations96 <- read.delim(file = url1, check.names = FALSE)
affiliations97 <- read.delim(file = url2, check.names = FALSE)
dim(affiliations96)
G96 <- graph_from_incidence_matrix(as.matrix(affiliations96))
# Split nodes into types by rows versus columns
# V(G96)$type # TRUE = club, FALSE = student,
clubs <- V(G96)[V(G96)$type == TRUE]
club_degrees <- degree(G96, v = clubs)
# Identify top & bottom
cat("top clubs\n")
head(sort(club_degrees, decreasing = TRUE), 3)
cat("Peripheral clubs\n")
head(sort(club_degrees, decreasing = FALSE), 3)
projections <- bipartite_projection(G96)
club_graph <- projections$proj2  # This is the club-club graph
# Weight = number of shared members
E(club_graph)$weight
# Top pairs with highest shared members
top_pairs <- as_data_frame(club_graph, what = "edges")
projections <- bipartite_projection(G96)
club_graph <- projections$proj2  # This is the club-club graph
# Weight = number of shared members
E(club_graph)$weight
# Top pairs with highest shared members
# top_pairs <- as_data_frame(club_graph, what = "edges")
top_pairs <- get.data.frame(club_graph, what = "edges")
top_pairs <- top_pairs[order(-top_pairs$weight), ]
head(top_pairs, 3)
degrees_H <- degree(H)
## Logarithmic binning and log-log plot
log_bins <- function(degrees, alpha = 2) {
min_deg <- min(degrees[degrees > 0])
max_deg <- max(degrees)
bin_edges <- c()
current_edge <- min_deg
while (current_edge < max_deg) {
bin_edges <- c(bin_edges, current_edge)
current_edge <- current_edge * alpha
}
bin_edges <- c(bin_edges, max_deg)
return(bin_edges)
}
# Generate log bins and bin the degrees
bin_edges <- log_bins(degrees_H, alpha = 2)
binned_degrees <- cut(degrees_H, breaks = bin_edges, include.lowest = TRUE)
binned_counts <- table(binned_degrees)
bin_widths <- diff(bin_edges)
normalized_counts <- as.numeric(binned_counts) / bin_widths
bin_centers <- sqrt(bin_edges[-length(bin_edges)] * bin_edges[-1])
# Log-log plot
log_bin_centers <- log10(bin_centers)
log_normalized_counts <- log10(normalized_counts / length(degrees_H))
# Plot
barplot(log_normalized_counts,
names.arg = round(log_bin_centers, 2),
xlab = "log10(Degree)",
ylab = "log10(Fraction of Nodes)",
main = "Log-Log Degree Distribution (H)",
col = "skyblue",
border = "black")
grid()
## Power-law fitting using poweRlaw
m_pl <- displ$new(degrees_H)
est_xmin <- estimate_xmin(m_pl)
m_pl$setXmin(est_xmin)
est_pars <- estimate_pars(m_pl)
m_pl$setPars(est_pars)
# Extract alpha (scaling exponent) and k_min
alpha <- m_pl$pars
k_min <- m_pl$xmin
cat("Estimated scaling exponent (alpha):", alpha, "\n")
cat("Estimated minimum degree (k_min):", k_min, "\n")
## Goodness-of-fit via bootstrapping
set.seed(123)  # for reproducibility
bs <- bootstrap(m_pl, no_of_sims = 100)
gof_obs <- bs$gof
# Extract GOF values from bootstrapped samples
gof_bootstrap <- bs$bootstraps$gof
# Calculate p-value: fraction of bootstrap GOFs > observed GOF
p_val <- mean(gof_bootstrap > gof_obs)
# Display
cat("Bootstrap p-value:", p_val, "\n")
if (p_val > 0.1) {
cat("The power-law distribution is a good fit (p > 0.1)\n")
} else {
cat("The power-law distribution is NOT a good fit (p <= 0.1)\n")
}
### ---- 2. Betweenness Centrality ---- ###
sorted_betweenness <- sort(betweenness_H, decreasing = TRUE)
valid_betweenness_indices <- which(sorted_betweenness > 0)
sorted_betweenness_nonzero <- sorted_betweenness[valid_betweenness_indices]
cumulative_betweenness_frac_nonzero <- valid_betweenness_indices / length(betweenness_H)
dev.new()
par(mar = c(4, 4, 3, 2))
plot(sorted_betweenness_nonzero, cumulative_betweenness_frac_nonzero, log = "xy", type = "l", col = "red", lwd = 2,
xlab = "Betweenness Centrality (log)", ylab = "Cumulative Fraction P(X>=x) (log)",
main = "Betweenness Centrality (H)", xaxt = "n", yaxt = "n")
axis(1, at = axTicks(1), labels = sprintf("%.1e", axTicks(1)))
axis(2, at = axTicks(2), labels = sprintf("%.1e", axTicks(2)))
grid(col = "gray", lty = "dotted")
# Calculate centrality measures
eigen_H <- eigen_centrality(H)$vector
betweenness_H <- betweenness(H, normalized = TRUE)
closeness_H <- closeness(H)
### ---- 1. Eigenvector Centrality ---- ###
# Sort and compute cumulative fraction
sorted_eigen <- sort(eigen_H, decreasing = TRUE)
cumulative_eigen_frac <- (1:length(sorted_eigen)) / length(sorted_eigen)
# Open new plot
dev.new()  # Opens a new plot window
par(mar = c(4, 4, 3, 2))
plot(sorted_eigen, cumulative_eigen_frac, log = "xy", type = "l", lwd = 2,
xlab = "Eigenvector Centrality (log)", ylab = "Cumulative Fraction P(X>=x) (log)",
main = "Eigenvector Centrality (H)")
grid()
### ---- 2. Betweenness Centrality ---- ###
sorted_betweenness <- sort(betweenness_H, decreasing = TRUE)
valid_betweenness_indices <- which(sorted_betweenness > 0)
sorted_betweenness_nonzero <- sorted_betweenness[valid_betweenness_indices]
cumulative_betweenness_frac_nonzero <- valid_betweenness_indices / length(betweenness_H)
dev.new()
par(mar = c(4, 4, 3, 2))
plot(sorted_betweenness_nonzero, cumulative_betweenness_frac_nonzero,
log = "xy", type = "l", lwd = 2,
xlab = "Betweenness Centrality (log)", ylab = "Cumulative Fraction P(X>=x) (log)",
main = "Betweenness Centrality (H)")
grid()
### ---- 3. Closeness Centrality ---- ###
hist_data_closeness <- hist(closeness_H, breaks = 30, plot = FALSE)
fraction_vertices_closeness <- hist_data_closeness$counts / length(closeness_H)
plot(hist_data_closeness$mids, fraction_vertices_closeness, type = "h", lwd = 5,
xlab = "Closeness Centrality", ylab = "Fraction of Vertices",
main = "Closeness Centrality (H)")
grid()
# Calculate centrality measures
eigen_H <- eigen_centrality(H)$vector
betweenness_H <- betweenness(H, normalized = TRUE)
closeness_H <- closeness(H)
### ---- 1. Eigenvector Centrality ---- ###
# Sort and compute cumulative fraction
sorted_eigen <- sort(eigen_H, decreasing = TRUE)
cumulative_eigen_frac <- (1:length(sorted_eigen)) / length(sorted_eigen)
# Open new plot
par(mar = c(4, 4, 3, 2))
plot(sorted_eigen, cumulative_eigen_frac, log = "xy", type = "l", lwd = 2,
xlab = "Eigenvector Centrality (log)", ylab = "Cumulative Fraction P(X>=x) (log)",
main = "Eigenvector Centrality (H)")
grid()
